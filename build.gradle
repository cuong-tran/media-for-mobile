// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.0.0"
}

allprojects {
    repositories {
        jcenter()
        maven {
            url getBuildProperty("ARTIFACTORY_CONTEXT_URL") + "/" + getBuildProperty("ARTIFACTORY_REPO_KEY")
            credentials {
                username getBuildProperty("ARTIFACTORY_USERNAME")
                password getBuildProperty("ARTIFACTORY_PASSWORD")
            }
        }
        maven {
            url getBuildProperty("ARTIFACTORY_CONTEXT_URL") + "/" + getBuildProperty("ARTIFACTORY_SNAPSHOTS_REPO_KEY")
            credentials {
                username getBuildProperty("ARTIFACTORY_USERNAME")
                password getBuildProperty("ARTIFACTORY_PASSWORD")
            }
        }
    }
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            project.android.compileOptions.incremental = true
            project.ext.configsPath = "${project.rootDir}/misc"
        }
    }
}

task wrapper(type: Wrapper) {
      gradleVersion = 3.1
//      distributionType = Wrapper.DistributionType.ALL
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

Object getBuildProperty(String varName, String defaultValue = null) {
    if (System.getenv().containsKey(varName)) {
        return System.getenv()[varName]
    }

    def File propsFile = file(project.rootProject.file('local.properties'))
    if (propsFile.exists() && propsFile.canRead()) {
        def Properties localProps = new Properties()

        localProps.load(new FileInputStream(propsFile))
        if (localProps.containsKey(varName)) {
            return localProps[varName];
        }
    }

    if (rootProject.hasProperty(varName)) {
        return rootProject.property(varName)
    }

    return defaultValue
}
